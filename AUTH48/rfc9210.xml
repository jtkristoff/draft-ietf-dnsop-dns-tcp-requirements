<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" docName="draft-ietf-dnsop-dns-tcp-requirements-15" number="9210" ipr="trust200902" updates="1123,1536" obsoletes="" submissionType="IETF" category="bcp" consensus="true" xml:lang="en" tocInclude="true" tocDepth="4" symRefs="true" sortRefs="true" version="3">

  <!-- xml2rfc v2v3 conversion 3.12.0 -->

  <front>
   <title abbrev="DNS Transport over TCP">DNS Transport over TCP - Operational Requirements</title>
   <seriesInfo name="RFC" value="9210"/>
   <seriesInfo name="BCP" value="235"/>

   <author fullname="John Kristoff" initials="J." surname="Kristoff">
      <organization>Dataplane.org</organization>
      <address>
        <postal>
          <street/>
          <city>Chicago</city>
          <region>IL</region>
          <code>60605</code>
          <country>United States of America</country>
        </postal>
        <phone>+1 312 493 0305</phone>
        <email>jtk@dataplane.org</email>
        <uri>https://dataplane.org/jtk/</uri>
      </address>
    </author>
    <author fullname="Duane Wessels" initials="D." surname="Wessels">
      <organization>Verisign</organization>
      <address>
        <postal>
          <street>12061 Bluemont Way</street>
          <city>Reston</city>
          <region>VA</region>
          <code>20190</code>
          <country>United States of America</country>
        </postal>
        <phone>+1 703 948 3200</phone>
        <email>dwessels@verisign.com</email>
        <uri>https://verisign.com</uri>
      </address>
    </author>
    <date year="2022" month="March" />
   <area>Operations and Management</area>
    <workgroup>Domain Name System Operations</workgroup>
   <keyword>DNS</keyword>
    <keyword>TCP</keyword>
   <abstract>
      <t>This document updates RFCs 1123 and 1536.  This
     document requires the operational practice of permitting
     DNS messages to be carried over TCP on the Internet as a Best
     Current Practice.  This operational requirement is aligned with the
     implementation requirements in RFC 7766.  The use of TCP includes
     both DNS over unencrypted TCP as well as over an encrypted TLS
     session.  The document also considers the consequences of this
     form of DNS communication and the potential operational issues that
     can arise when this Best Current Practice is not upheld.</t>
    </abstract>
  </front>
  <middle>
    <section numbered="true" toc="default">
      <name>Introduction</name>
      <t>DNS messages are delivered using UDP or TCP communications.
     While most DNS transactions are carried over UDP, some operators
     have been led to believe that any DNS-over-TCP traffic is unwanted
     or unnecessary for general DNS operation.  When DNS over TCP has
     been restricted, a variety of communication failures and debugging
     challenges often arise.  As DNS and new naming system features have
     evolved, TCP as a transport has become increasingly important for
     the correct and safe operation of an Internet DNS.  Reflecting
     modern usage, the DNS standards declare that
     support for TCP is a required part of the DNS implementation
     specifications <xref target="RFC7766" format="default"/>.  This document is the
     equivalent of formal requirements for the operational community,
     encouraging system administrators, network engineers, and security
     staff to ensure DNS-over-TCP communications support is on par with
     DNS-over-UDP communications. It updates <xref target="RFC1123" sectionFormat="comma" section="6.1.3.2"/> to clarify that all DNS resolvers and recursive
     servers
     <bcp14>MUST</bcp14> support and service both TCP and UDP queries and also
     updates <xref target="RFC1536" format="default"/> to remove the misconception
     that TCP is only useful for zone transfers.
      </t>
      <section numbered="true" toc="default"><name>Requirements Language</name>
        <t>
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
    NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
    described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>
      </section>
    </section>
    <section numbered="true" toc="default">
      <name>History of DNS over TCP</name>
      <t>The curious state of disagreement between operational best practices
     and guidance for DNS transport protocols derives from conflicting
     messages operators have received from other operators, implementors,
     and even the IETF.  Sometimes these mixed signals have been
     explicit; on other occasions, conflicting messages have been implicit.  This
     section presents an interpretation of the storied and conflicting
     history that led to this document.  This section is included for
     informational purposes only.</t>
      <section numbered="true" toc="default">
        <name>Uneven Transport Usage and Preference</name>
        <t>In the original suite of DNS specifications, <xref target="RFC1034" format="default"/> and <xref target="RFC1035" format="default"/> clearly specify
       that DNS messages could be carried in either
       UDP or TCP, but they also state that there is a preference for UDP as the
       best transport for queries in the general case.  As stated in
       <xref target="RFC1035" format="default"/>:
        </t>
	<blockquote>
          While virtual circuits can be used for any DNS activity,
         datagrams are preferred for queries due to their lower overhead
         and better performance.
        </blockquote>
        <t>Another early, important, and influential document, <xref target="RFC1123" format="default"/>, marks the preference for a transport protocol more explicitly:</t>
<blockquote>
DNS resolvers and recursive servers <bcp14>MUST</bcp14> support UDP, and
         <bcp14>SHOULD</bcp14> support TCP, for sending (non-zone-transfer) queries.
</blockquote>
        <t>
       and it further stipulates that:</t>
<blockquote>
A name server <bcp14>MAY</bcp14> limit the resources it devotes to TCP
         queries, but it <bcp14>SHOULD NOT</bcp14> refuse to service a TCP query just
         because it would have succeeded with UDP.
	 </blockquote>
        <t>Culminating in <xref target="RFC1536" format="default"/>, DNS over TCP
       came to be associated primarily with the zone transfer mechanism,
       while most DNS queries and responses were seen as the dominion of
       UDP.</t>
      </section>
      <section numbered="true" toc="default">
        <name>Waiting for Large Messages and Reliability</name>
        <t>In the original specifications, the maximum DNS-over-UDP
       message size was enshrined at 512 bytes.  However, even while
        <xref target="RFC1123" format="default"/> prefers UDP for non-zone transfer
       queries, it foresaw that DNS over TCP would become more popular in the future to overcome this limitation:</t>
<blockquote>
[...] it is also clear that some new DNS record types
         defined in the future will contain information exceeding the
         512 byte limit that applies to UDP, and hence will require
         TCP.
        </blockquote>
        <t>At least two new, widely anticipated developments were set to
	elevate the need for DNS-over-TCP transactions. The first was
       dynamic updates defined in <xref target="RFC2136" format="default"/>, and the
       second was the set of extensions collectively known as "DNSSEC",
       whose operational considerations were originally given in <xref target="RFC2541" format="default"/>
       (note that <xref target="RFC2541" format="default"/> has been obsoleted by <xref target="RFC6781" format="default"/>).  The
       former suggests that</t>
<blockquote>
       ...requestors who require an accurate response
code must use TCP.</blockquote>
       <t>
       while the latter warns that </t><blockquote>... larger keys
       increase the size of the KEY and SIG RRs.  This increases the chance
       of DNS UDP packet overflow and the possible necessity for using
       higher overhead TCP in responses.</blockquote>
        <t>Yet, defying some expectations, DNS over TCP remained little used
       in real traffic across the Internet in the late 1990s.  Dynamic updates saw
       little deployment between autonomous networks.  Around the time
       DNSSEC was first defined, another new feature helped solidify
       UDP transport dominance for message transactions.</t>
      </section>
      <section numbered="true" toc="default">
        <name>EDNS(0)</name>
        <t>In 1999, the IETF published the Extension Mechanisms for DNS (EDNS(0)) in <xref target="RFC2671"/> (which was obsoleted by <xref target="RFC6891" format="default"/> in 2013).  That document
       standardized a way for communicating DNS nodes to perform
       rudimentary capabilities negotiation.  One such capability
       written into the base specification and present in every EDNS(0)-compatible
       message is the value of the maximum UDP payload size
       the sender can support.  This unsigned 16-bit field specifies,
       in bytes, the maximum (possibly fragmented) DNS message size a
       node is capable of receiving over UDP.  In practice, typical values are
       a subset of the 512- to 4096-byte range.  EDNS(0) became
       widely deployed over the next several years, and numerous surveys
       (see <xref target="CASTRO2010" format="default"/> and <xref target="NETALYZR" format="default"/>)
       have shown that many systems support larger UDP MTUs
       with EDNS(0).</t>
        <t>The natural effect of EDNS(0) deployment meant DNS messages
       larger than 512 bytes would be less reliant on TCP than they
       might otherwise have been.  While a non-negligible population of
       DNS systems lacked EDNS(0) or fell back to TCP when necessary,
       DNS clients still strongly prefer UDP to TCP.
       For example, as of 2014,
       DNS-over-TCP transactions remained a very small fraction of
       overall DNS traffic received by root name servers <xref target="VERISIGN" format="default"/>.</t>
      </section>
      <section numbered="true" toc="default">
        <name>Fragmentation and Truncation</name>
        <t>Although EDNS(0) provides a way for endpoints to signal support for
       DNS messages exceeding 512 bytes, the realities of a diverse and
       inconsistently deployed Internet may result in some large messages
       being unable to reach their destination.  Any IP datagram whose size
       exceeds the MTU of a link it transits will be fragmented and then
       reassembled by the receiving host.  Unfortunately, it is not uncommon
       for middleboxes and firewalls to block IP fragments.  If one or more
       fragments do not arrive, the application does not receive the message,
       and the request times out.</t>
        <t>For IPv4-connected hosts, the MTU is often an Ethernet
       payload size of 1500 bytes.  This means that the largest unfragmented
       UDP DNS message that can be sent over IPv4 is likely 1472 bytes,
       although tunnel encapsulation may reduce that maximum message
       size in some cases.</t>
        <t>For
       IPv6, the situation is a little more complicated.  First, IPv6 headers
       are 40 bytes (versus 20 without options in IPv4).  Second, approximately
       one-third of DNS recursive resolvers
       use the minimum MTU of 1280 bytes <xref target="APNIC" format="default"/>.
       Third, fragmentation in IPv6 can only be
       done by the host originating the datagram.  The need to fragment is
       conveyed in an ICMPv6 "Packet Too Big" message.  The originating host
       indicates a fragmented datagram with IPv6 extension headers.
       Unfortunately, it is quite common for both ICMPv6 and IPv6 extension
       headers to be blocked by middleboxes.  According to
       <xref target="HUSTON" format="default"/>, some 35% of IPv6-capable
       recursive resolvers were unable to receive a fragmented IPv6 packet.
       When the originating host receives a signal that
       fragmentation is required, it is expected to populate its path
       MTU cache for that destination.  The application will then retry
       the query after a timeout since the host does not generally retain
       copies of messages sent over UDP for potential retransmission.</t>
        <t>The practical consequence of all this is that DNS requestors
       must be prepared to retry queries with different EDNS(0) maximum
       message size values. Administrators of <xref target="BIND" format="default"/> are likely to be 
       familiar with seeing the following message in their system logs: "success resolving ... after reducing the
       advertised EDNS(0) UDP packet size to 512 octets".</t>
        <t>Often, reducing the EDNS(0) UDP packet size leads to a
       successful response.  That is, the necessary data fits within the
       smaller message size.  However, when the data does not fit, the
       server sets the truncated flag in its response, indicating the
       client should retry over TCP to receive the whole response.  This
       is undesirable from the client's point of view because it adds
       more latency and is potentially undesirable from the server's point
       of view due to the increased resource requirements of TCP.</t>
        <t>Note that a receiver is unable to differentiate between packets
       lost due to congestion and packets (fragments) intentionally
       dropped by firewalls or middleboxes.  Over network paths with
       non-trivial amounts of packet loss, larger, fragmented DNS responses
       are more likely to never arrive and time out compared to smaller,
       unfragmented responses.  Clients might be misled into retrying
       queries with different EDNS(0) UDP packet size values for the
       wrong reason.</t>
        <t>The issues around fragmentation, truncation, and TCP are
       driving certain implementation and policy decisions in the DNS.
       Notably, Cloudflare implemented a technique that minimizes the number of DNSSEC denial-of-existence records (for its online signing platform)
       <xref target="CLOUDFLARE" format="default"/> and uses Elliptic Curve Digital
       Signature Algorithms (ECDSAs) such that
       their signed responses fit easily in 512 bytes.  The Key Signing Key (KSK) Rollover
       Design Team <xref target="DESIGNTEAM" format="default"/> spent a lot of time
       thinking and worrying about response sizes.  There is growing
       sentiment in the DNSSEC community that RSA key sizes beyond
       2048 bits are impractical and that critical infrastructure zones
       should transition to elliptic curve algorithms to keep response
       sizes manageable <xref target="ECDSA" format="default"/>.</t>
        <t>More recently, renewed security concerns about fragmented DNS
       messages (see <xref target="I-D.ietf-dnsop-avoid-fragmentation" format="default"/> and <xref target="FRAG_POISON" format="default"/>)
       are leading implementors to consider smaller responses and lower
       default EDNS(0) UDP payload size values for both queriers and
       responders <xref target="FLAGDAY2020" format="default"/>.</t>
      </section>
      <section numbered="true" toc="default">	
        <name>"Only Zone Transfers Use TCP"</name>
        <t>Today, the majority of the DNS community expects, or at least
       has a desire, to see DNS-over-TCP transactions occur without
       interference <xref target="FLAGDAY2020" format="default"/>.  However, there has also been a long-held belief by
       some operators, particularly for security-related reasons, that
       DNS-over-TCP services should be purposely limited or not provided
       at all <xref target="CHES94" format="default"/> <xref target="DJBDNS" format="default"/>.  A popular meme is
       that DNS over TCP is only ever used for zone
       transfers and is generally unnecessary otherwise, with filtering
       all DNS-over-TCP traffic even described as a best practice.</t>
        <t>The position on restricting DNS over TCP had some
       justification given that historical implementations of DNS
       name servers provided very little in the way of TCP connection
       management (for example, see <xref target="RFC7766" sectionFormat="of" section="6.1.2"/> for more details).  However, modern
       standards and implementations are nearing parity with the more
       sophisticated TCP management techniques employed by, for example,
       HTTP(S) servers and load balancers.</t>
      </section>
      <section numbered="true" toc="default">
        <name>Reuse, Pipelining, and Out-of-Order Processing</name>
        <t>The idea that a TCP connection can support multiple transactions
       goes back as far as <xref target="RFC0883" format="default"/>, which states:
       "Multiple messages may be sent over a virtual circuit." Although
       <xref target="RFC1035" format="default"/>, which updates the former, omits this
       particular detail, it has been generally accepted that a TCP connection
       can be used for more than one query and response.</t>
        <t><xref target="RFC5966" format="default"/> clarifies that servers are not
       required to preserve the order of queries and responses over
       any transport.
       <xref target="RFC7766" format="default"/>, which updates the former, further
       encourages query pipelining over TCP to achieve performance on
       par with UDP.
       A server that sends out-of-order responses to pipelined queries
       avoids head-of-line blocking when the response for a later
       query is ready before the response to an earlier query.</t>
        <t>However, TCP can potentially suffer from a different
       head-of-line blocking problem due to packet loss.
       Since TCP itself enforces ordering, a single lost segment
       delays delivery of data in any following segments until
       the lost segment is retransmitted and successfully received.</t>
      </section>
    </section>
    <section numbered="true" toc="default">
      <name>DNS-over-TCP Requirements</name>
      <t>An average increase in DNS message size (e.g., due to DNSSEC),
     the continued development of new DNS features (<xref target="dnsrfcs" format="default"/>), and a denial-of-service mitigation
     technique (<xref target="Security" format="default"/>) all show that
     DNS-over-TCP transactions are as important to the correct and safe
     operation of the Internet DNS as ever, if not more so.
     Furthermore, there has been research that argues
     connection-oriented DNS transactions may provide security and
     privacy advantages over UDP transport <xref target="TDNS" format="default"/>.
     In fact, the standard for DNS over TLS <xref target="RFC7858" format="default"/>
     is just this sort of specification.  Therefore, this document makes
     explicit that it is undesirable for network operators to
      artificially inhibit DNS-over-TCP transport.</t>    
      <t><xref target="RFC1123" sectionFormat="of" section="6.1.3.2"/> is updated as follows:</t>
      <t>OLD:
      </t>
      <blockquote>
        DNS resolvers and recursive servers <bcp14>MUST</bcp14> support UDP, and
        SHOULD support TCP, for sending (non-zone-transfer) queries.
      </blockquote>

      <t>NEW:
      </t>
        <blockquote>
          All DNS resolvers and servers <bcp14>MUST</bcp14> support and service 
          both UDP and TCP queries.
        </blockquote>
     

      <t>Note that:</t>
      <ul spacing="normal">
        <li>DNS servers (including forwarders) <bcp14>MUST</bcp14> support and service
         TCP for receiving queries so that clients can reliably receive
         responses that are larger than what either side considers too large
         for UDP.</li>
        <li>DNS clients <bcp14>MUST</bcp14> support TCP for sending
         queries so that they can retry truncated UDP responses as necessary.</li>
      </ul>
      <t>
     Furthermore, the requirement in <xref target="RFC1123" sectionFormat="of" section="6.1.3.2"/> around limiting the resources a server devotes
     to queries is hereby updated:</t>
      <t>OLD:
      </t>
      <blockquote>
          A name server <bcp14>MAY</bcp14> limit the resources it devotes to TCP queries,
          but it <bcp14>SHOULD NOT</bcp14> refuse to service a TCP query just
          because it would have succeeded with UDP.
      </blockquote>
      <t>

     NEW:
      </t>
        <blockquote>
           A name server <bcp14>MAY</bcp14> limit the resources it devotes to queries, but
           it <bcp14>MUST NOT</bcp14> refuse to service a query just because it would have
           succeeded with another transport protocol.</blockquote>
      <t>Lastly, <xref target="RFC1536" sectionFormat="of" section="1"/> is updated to eliminate
     the misconception that TCP is only useful for zone transfers:</t>
      <t>OLD:
      </t>
        <blockquote>
         DNS implements the classic request-response scheme of
         client-server interaction. UDP is, therefore, the chosen protocol
         for communication though TCP is used for zone transfers.
	</blockquote>
      <t>

     NEW:
      </t>
         <blockquote>
          DNS implements the classic request-response scheme of
          client-server interaction.
	 </blockquote>
      
      <t>The filtering of DNS over TCP is harmful in the general
     case.  DNS resolver and server operators <bcp14>MUST</bcp14> support and provide
     DNS service over both UDP and TCP transports.  Likewise, network
     operators <bcp14>MUST</bcp14> allow DNS service over both UDP and TCP transports.
     It is acknowledged that DNS-over-TCP service can pose operational
     challenges that are not present when running DNS over UDP alone,
     and vice versa.  However,
     the potential damage incurred by prohibiting DNS-over-TCP
     service is more detrimental to the continued utility and success of
     the DNS than when its usage is allowed.</t>
    </section>
    <section numbered="true" toc="default">
      <name>Network and System Considerations</name>
      <t>This section describes measures that systems and applications
   can take to optimize performance over TCP and to protect themselves
   from TCP-based resource exhaustion and attacks.</t>
      <section numbered="true" toc="default">
        <name>Connection Establishment and Admission</name>
        <t>Resolvers and other DNS clients should be aware that some
       servers might not be reachable over TCP.  For this reason, clients
       <bcp14>MAY</bcp14> track and limit the number of TCP connections and
       connection attempts to a single server.  Reachability problems
       can be caused by network elements close to the server, close
       to the client, or anywhere along the path between them.  Mobile
       clients that cache connection failures <bcp14>MAY</bcp14> do so on a per-network
       basis or <bcp14>MAY</bcp14> clear such a cache upon change of network.</t>
        <t>Additionally, DNS clients
       <bcp14>MAY</bcp14> enforce a short timeout on unestablished connections
       rather than rely on the host operating system's TCP connection
       timeout, which is often around 60-120 seconds (i.e., due to an
       initial retransmission timeout of 1 second, the exponential
       back-off rules of <xref target="RFC6298" format="default"/>, and a limit of six
       retries as is the default in Linux).</t>
        <t>The SYN flooding attack is a denial-of-service method
       affecting hosts that run TCP server processes <xref target="RFC4987" format="default"/>.  This attack can be very effective if
       not mitigated.  One of the most effective mitigation techniques
       is SYN cookies, described in <xref target="RFC4987" sectionFormat="of" section="3.6"/>, which allows the server to avoid allocating
       any state until the successful completion of the three-way
       handshake.</t>
        <t>Services not intended for use by the public Internet,
       such as most recursive name servers, <bcp14>SHOULD</bcp14> be protected
       with access controls.  Ideally, these controls are placed in
       the network, well before any unwanted TCP packets can
       reach the DNS server host or application.  If this is not
       possible, the controls can be placed in the application
       itself.  In some situations (e.g., attacks), it may be necessary
       to deploy access controls for DNS services that should
       otherwise be globally reachable.  See also <xref target="RFC5358" format="default"/>.</t>
        <t>The FreeBSD and NetBSD operating systems have an "accept filter" feature
       (<xref target="accept_filter" format="default"/>)
       that postpones delivery of TCP connections to applications
       until a complete, valid request has been received.  The
       dns_accf(9) filter ensures that a valid DNS message is
       received.  If not, the bogus connection never reaches the
       application.
       The Linux TCP_DEFER_ACCEPT feature, while more limited in scope,
       can provide some of the same benefits as the BSD accept filter
       feature.
       These features are implemented as low-level socket options
       and are not activated automatically. If applications wish to
       use these features, they need to make specific calls to set the
       right options, and administrators may also need to configure the
       applications to appropriately use the features.</t>
        <t>Per <xref target="RFC7766" format="default"/>, applications and administrators
       are advised to remember that TCP <bcp14>MAY</bcp14> be used before sending
       any UDP queries.  Networks and applications <bcp14>MUST NOT</bcp14> be configured
       to refuse TCP queries that were not preceded by a UDP query.</t>
        <t>TCP Fast Open (TFO) <xref target="RFC7413" format="default"/> allows TCP
       clients to shorten the handshake for subsequent connections
       to the same server.  TFO saves one round-trip time in the
       connection setup.  DNS servers <bcp14>SHOULD</bcp14> enable TFO when possible.
       Furthermore, DNS servers clustered behind a single service
       address (e.g., anycast or load balancing) <bcp14>SHOULD</bcp14> either use the
       same TFO server key on all instances or disable TFO for all members of the cluster.</t>
        <t>DNS clients <bcp14>MAY</bcp14> also enable TFO.  At the time of this writing, it is not implemented or is disabled by default on some operating systems.
       <xref target="WIKIPEDIA_TFO" format="default"/> describes applications and operating systems
       that support TFO.</t>
      </section>
      <section numbered="true" toc="default">
        <name>Connection Management</name>
        <t>Since host memory for TCP state is a finite resource, DNS
       clients and
       servers <bcp14>SHOULD</bcp14> actively manage their connections.  Applications
       that do not actively manage their connections
       can encounter resource exhaustion leading to denial of
       service.  For DNS, as in other protocols, there is a trade-off
       between keeping connections open for potential future use and
       the need to free up resources for new connections that will arrive.</t>
        <t>Operators of DNS server software <bcp14>SHOULD</bcp14> be aware that operating
       system and application vendors <bcp14>MAY</bcp14> impose a limit on the total
       number of established connections.  These limits may be designed
       to protect against DDoS attacks or performance degradation.
       Operators <bcp14>SHOULD</bcp14> understand how to increase these limits if
       necessary and the consequences of doing so.  Limits imposed by
       the application <bcp14>SHOULD</bcp14> be lower than limits imposed by the
       operating system so that the application can apply its own
       policy to connection management, such as closing the oldest
       idle connections first.</t>
        <t>DNS server software <bcp14>MAY</bcp14> provide a configurable limit on
       the number of established connections per source IP address
       or subnet.  This can be used to ensure that a single or small
       set of users cannot consume all TCP resources and deny
       service to other users.  Note, however, that if this limit
       is enabled, it possibly limits client performance while leaving
       some TCP resources unutilized. Operators <bcp14>SHOULD</bcp14> be aware of
       these trade-offs and ensure this limit, if configured, 
       is set appropriately based on the number and diversity
       of their users and  whether users connect from unique IP addresses or
       through a shared Network Address Translator (NAT) <xref target="RFC3022" format="default"/>.</t>
        <t>DNS server software <bcp14>SHOULD</bcp14> provide a configurable timeout
       for idle TCP connections.  This can be used to free up resources
       for new connections and to ensure that idle
       connections are eventually closed.  At the same time, it possibly
       limits client performance while leaving some TCP resources unutilized.
       For very busy name servers, this
       might be set to a low value, such as a few seconds.  For
       less busy servers, it might be set to a higher value, such
       as tens of seconds. DNS clients and servers <bcp14>SHOULD</bcp14> signal
       their timeout values using the edns-tcp-keepalive EDNS(0)
       option <xref target="RFC7828" format="default"/>.</t>
        <t>DNS server software <bcp14>MAY</bcp14> provide a configurable limit on
       the number of transactions per TCP connection.
       This can help protect against unfair connection use (e.g., not releasing
       connection slots to other clients) and network evasion attacks.</t>
        <t>Similarly, DNS server software <bcp14>MAY</bcp14> provide a configurable
       limit on the total duration of a TCP connection.
       This can help protect against unfair connection use, slow read attacks, 
       and network evasion attacks.</t>
        <t>Since clients may not be aware of server-imposed limits,
       clients utilizing TCP for DNS need to always be prepared to
       re-establish connections or otherwise retry outstanding
       queries.</t>

     </section>
      <section numbered="true" toc="default">
        <name>Connection Termination</name>
        <t>The TCP peer that initiates a
       connection close retains the socket in the TIME_WAIT state
       for some amount of time, possibly a few minutes. 
       It is generally preferable for clients to initiate the
       close of a TCP connection so that busy servers do not 
       accumulate many sockets in the TIME_WAIT state, which can
       cause performance problems or even denial of service.
       The edns-tcp-keepalive EDNS(0) option <xref target="RFC7828" format="default"/>
       can be used to encourage clients to close connections.</t>
        <t>On systems where large numbers of sockets in TIME_WAIT
       are observed (as either a client or a server) and are affecting
       an application's performance, it may be tempting to tune local TCP
       parameters.  For example, the Linux kernel has
       a "sysctl" parameter named net.ipv4.tcp_tw_reuse, which allows
       connections in the TIME_WAIT state to be reused in specific
       circumstances.  Note, however, that this affects only outgoing (client)
       connections and has no impact on servers.  In most cases, it is <bcp14>NOT
       RECOMMENDED</bcp14> to change parameters related to the TIME_WAIT state.
       It should only be done by those with detailed knowledge of both TCP
       and the affected application.</t>
      </section>
      <section numbered="true" toc="default">
        <name>DNS over TLS</name>
        <t>DNS messages may be sent over TLS to provide privacy
       between stubs and recursive resolvers. <xref target="RFC7858" format="default"/>
       is a Standards Track document describing how this works.
       Although DNS over TLS utilizes TCP port 853 instead of port 53, this
       document applies equally well to DNS over TLS.  Note, however,
       that DNS over TLS is only defined between stubs and
       recursives at the time of this writing.</t>
        <t>The use of TLS places even stronger operational burdens
       on DNS clients and servers.  Cryptographic functions for
       authentication and encryption require additional processing.
       Unoptimized connection setup with TLS 1.3 <xref target="RFC8446" format="default"/>
       takes one additional round trip compared to TCP.
       Connection setup
       times can be reduced with TCP Fast Open and TLS False Start <xref target="RFC7918" format="default"/> for TLS 1.2.  TLS 1.3 session resumption does not
       reduce round-trip latency because no application profile for use of
       TLS 0-RTT data with DNS has been published at the time of this
       writing.  However, TLS session resumption can reduce the number of
       cryptographic operations, and in TLS 1.2, session resumption does
       reduce the number of additional round trips from two to one.</t>
      </section>
      <section numbered="true" toc="default">
        <name>Defaults and Recommended Limits</name>
        <t>A survey of features and defaults was conducted for popular
       open-source DNS server implementations at the time of writing.
       This section documents those defaults and makes recommendations
       for configurable limits that can be used in the absence of any
       other information.  Any recommended values in this document are
       only intended as a starting point for administrators that are
       unsure of what sorts of limits might be reasonable. Operators <bcp14>SHOULD</bcp14>
       use application-specific monitoring, system logs, and system
       monitoring tools to gauge whether their service is operating
       within or exceeding these limits and adjust accordingly.</t>
        <t>Most open-source DNS server implementations provide a
       configurable limit on the total number of established connections.
       Default values range from 20 to 150.  In most cases, where the
       majority of queries take place over UDP, 150 is a reasonable limit.
       For services or environments where most queries take place over
       TCP or TLS, 5000 is a more appropriate limit.</t>
        <t>Only some open-source implementations provide a way to limit
       the number of connections per source IP address or subnet, but
       the default is to have no limit.  For environments or situations
       where it may be necessary to enable this limit, 25 connections
       per source IP address is a reasonable starting point.  The limit
       should be increased when aggregated by subnet or for services
       where most queries take place over TCP or TLS.</t>
        <t>Most open-source implementations provide a configurable idle
       timeout on connections.  Default values range from 2 to 30 seconds.
       In most cases, 10 seconds is a reasonable default for this limit.
       Longer timeouts improve connection reuse, but busy servers may
       need to use a lower limit.</t>
        <t>Only some open-source implementations provide a way to limit
       the number of transactions per connection, but the default is to
       have no limit.  This document does not offer advice on particular
       values for such a limit.</t>
        <t>Only some open-source implementations provide a way to limit
       the duration of connection, but the default is to have no limit.
       This document does not offer advice on particular values for such
       a limit.</t>
      </section>
    </section>
    <section numbered="true" toc="default">
      <name>DNS-over-TCP Filtering Risks</name>
      <t>Networks that filter DNS over TCP risk losing access to
     significant or important pieces of the DNS namespace.  For a
     variety of reasons, a DNS answer may require a DNS-over-TCP query.
     This may include large message sizes, lack of EDNS(0) support, or DDoS
     mitigation techniques (including Response Rate Limiting <xref target="RRL" format="default"/>); additionally, perhaps some future capability that is as
     yet unforeseen will also demand TCP transport.</t>
      <t>For example, <xref target="RFC7901" format="default"/> describes a latency-avoiding
     technique that sends extra data in DNS responses.  This makes
     responses larger and potentially increases the effectiveness of DDoS reflection
     attacks.  The specification mandates the use of TCP or DNS
     cookies <xref target="RFC7873" format="default"/>.</t>
      <t>Even if any or all particular answers have consistently been
     returned successfully with UDP in the past, this continued behavior
     cannot be guaranteed when DNS messages are exchanged between
     autonomous systems.  Therefore, filtering of DNS over TCP is
     considered harmful and contrary to the safe and successful operation
     of the Internet.  This section enumerates some of the known risks
     at the time of this writing when networks filter DNS over
     TCP.</t>
      <section numbered="true" toc="default">
        <name>Truncation, Retries, and Timeouts</name>
       <t>Networks that filter DNS over TCP may inadvertently cause
       problems for third-party resolvers as experienced by <xref target="TOYAMA" format="default"/>.  For example, a resolver receives queries
       for a moderately popular domain.  The resolver forwards the queries
       to the domain's authoritative name servers, but those servers
       respond with the TC bit set.  The resolver retries over TCP,
       but the authoritative server blocks DNS over TCP.  The pending
       connections consume resources on the resolver until they time out.
       If the number
       and frequency of these truncated-and-then-blocked queries are sufficiently high,
       the resolver wastes valuable resources on queries that can never be answered.
       This condition is generally not easily or completely mitigated by the
       affected DNS resolver operator.</t>
      </section>
      <section numbered="true" toc="default">
        <name>DNS Root Zone KSK Rollover</name>

        <t>The plans for deploying DNSSEC KSK for the root zone highlighted
       a potential problem in retrieving the root zone key set <xref target="LEWIS" format="default"/>.  During some phases of the KSK rollover process,
       root zone DNSKEY responses were
       larger than 1280 bytes, the IPv6 minimum MTU for links
       carrying IPv6 traffic <xref target="RFC8200" format="default"/>.
       There was some concern
       that any DNS server unable to receive large
       DNS messages over UDP, or any DNS message over TCP, would experience
       disruption while performing DNSSEC validation <xref target="KSK_ROLLOVER_ARCHIVES" format="default"/>.</t>
        <t>However, during the
       year-long postponement of the KSK rollover, there were no reported problems
       that could be attributed to the 1414 octet DNSKEY response when both
       the old and new keys were published in the zone.  Additionally, there
       were no reported problems during the two-month period when the old key was
       published as revoked and the DNSKEY response was 1425 octets in size <xref target="ROLL_YOUR_ROOT" format="default"/>.</t>
      </section>
    </section>
    <section anchor="logging-monitoring" numbered="true" toc="default">
      <name>Logging and Monitoring</name>
      <t>Developers of applications that log or monitor DNS
     <bcp14>SHOULD NOT</bcp14> ignore TCP due to the perception that it is rarely used or
     is hard to process.  Operators <bcp14>SHOULD</bcp14> ensure that
     their monitoring and logging applications properly capture
     DNS messages over TCP.  Otherwise, attacks, exfiltration
     attempts, and normal traffic may go undetected.</t>
      <t>DNS messages over TCP are in no way guaranteed to arrive
     in single segments.  In fact, a clever attacker might attempt
     to hide certain messages by forcing them over very small TCP
     segments.  Applications that capture network packets (e.g.,
     with libpcap <xref target="libpcap" format="default"/>) <bcp14>SHOULD</bcp14> implement and perform full
     TCP stream reassembly and analyze the reassembled stream instead of the individual packets.
     Otherwise, they are vulnerable to network evasion attacks <xref target="phrack" format="default"/>.
     
     Furthermore, such applications need to protect
     themselves from resource exhaustion attacks by limiting the amount
     of memory allocated to tracking unacknowledged connection state data.
     dnscap <xref target="dnscap" format="default"/> is an
     open-source example of a DNS logging program that implements
     TCP stream reassembly.</t>
      <t>Developers <bcp14>SHOULD</bcp14> also keep in mind connection reuse,
     query pipelining, and out-of-order responses when building and testing
     DNS monitoring applications.</t>
      <t>As an alternative to packet capture, some DNS server software
     supports dnstap <xref target="dnstap" format="default"/> as an integrated monitoring
     protocol intended to facilitate wide-scale DNS monitoring.</t>
    </section>
    <section anchor="IANA" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <t>This document has no IANA actions.</t>
    </section>
    <section anchor="Security" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>This document, providing operational requirements, is the
     companion to the implementation requirements of DNS over TCP
     provided in <xref target="RFC7766" format="default"/>.  The security considerations
     from <xref target="RFC7766" format="default"/> still apply.</t>
      <t>Ironically, returning truncated DNS-over-UDP answers in order
     to induce a client query to switch to DNS over TCP has become
     a common response to source-address-spoofed, DNS denial-of-service
     attacks <xref target="RRL" format="default"/>.  Historically, operators have
     been wary of TCP-based attacks, but in recent years, UDP-based
     flooding attacks have proven to be the most common protocol attack
     on the DNS.  Nevertheless, a high rate of short-lived DNS
     transactions over TCP may pose challenges.  In fact, <xref target="DAI21" format="default"/> details a class of IP fragmentation attacks
     on DNS transactions if the IP Identifier field (16 bits in IPv4 and 32 bits in IPv6) can be predicted and a
     system is coerced to fragment rather than retransmit messages.
     While many operators have provided DNS-over-TCP service for many
     years without duress, past experience is no guarantee of future
     success.</t>
      <t>DNS over TCP is similar to many other Internet TCP services.
     TCP threats and many mitigation strategies have been
     well documented in a series of documents such as <xref target="RFC4953" format="default"/>, <xref target="RFC4987" format="default"/>, <xref target="RFC5927" format="default"/>, and <xref target="RFC5961" format="default"/>.</t>
      <t>As mentioned in <xref target="logging-monitoring" format="default"/>, applications
     that implement TCP stream reassembly need to limit the amount of
     memory allocated to connection tracking.  A failure to do so could
     lead to a total failure of the logging or monitoring application.
     Imposition of resource limits creates a trade-off between allowing
     some stream reassembly to continue and allowing some evasion attacks
     to succeed.</t>
      <t>This document recommends that DNS servers enable TFO when possible.  <xref target="RFC7413" format="default"/>
     recommends that a pool of servers behind a load balancer with a shared
     server IP address also share the key used to generate Fast Open cookies
     to prevent inordinate fallback to the three-way handshake (3WHS).  This guidance remains
     accurate but comes with a caveat: compromise of one server would reveal
     this group-shared key and allow for attacks involving the other servers
     in the pool by forging invalid Fast Open cookies.</t>
    </section>
    <section anchor="Privacy" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Since DNS over both UDP and TCP uses the same underlying message
     format, the use of one transport instead of the other does not change
     the privacy characteristics of the message content (i.e., the name
     being queried). A number of protocols have recently been developed to 
     provide DNS privacy, including DNS over TLS <xref target="RFC7858" format="default"/>,
     DNS over DTLS <xref target="RFC8094" format="default"/>, DNS over HTTPS
     <xref target="RFC8484" format="default"/>, with even more on the way.</t>
     <t>Because TCP is somewhat more complex than UDP, some
     characteristics of a TCP conversation may enable DNS client fingerprinting and
     tracking that is not possible with UDP.  For example, the choice of
     initial sequence numbers, window size, and options might be able
     to identify a particular TCP implementation or even individual
     hosts behind shared resources such as NATs.</t>
    </section>
  </middle>
  <back>

<displayreference target="I-D.ietf-dnsop-avoid-fragmentation" to="AVOID_FRAGS"/>

   <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7873.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
      </references>
      <references>
        <name>Informative References</name>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.0793.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.0883.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1123.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1536.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1995.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1996.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2541.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2671.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2694.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3022.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3225.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3226.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4472.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4953.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4987.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5358.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5452.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5507.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5625.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5927.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5936.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5961.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5966.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6298.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6762.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6781.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6950.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7477.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7534.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7720.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7901.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7918.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8027.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8094.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8162.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8200.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8324.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8467.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8482.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8483.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8484.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8490.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8501.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8806.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8906.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8932.xml"/>
     <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8945.xml"/>

     <reference anchor="CHES94">
          <front>
            <title>Firewalls and Internet Security: Repelling the Wily Hacker</title>
            <author fullname="William R. Cheswick" initials="W." surname="Cheswick"/>
            <author fullname="Steven M. Bellovin" initials="S." surname="Bellovin"/>
            <date year="1994"/>
          </front>
	  <refcontent>First Edition</refcontent>
        </reference>

        <reference anchor="DAI21">
          <front>
            <title>DNS-over-TCP Considered Vulnerable</title>
            <author fullname="Tianxiang Dai" initials="T." surname="Dai"/>
            <author fullname="Haya Shulman" initials="H." surname="Shulman"/>
            <author fullname="Michael Waidner" initials="M." surname="Waidner"/>
            <date year="2021" month="July" />
          </front>
	  <seriesInfo name="DOI" value="10.1145/3472305.3472884"/>
        </reference>

        <reference anchor="DJBDNS" target="https://cr.yp.to/djbdns/tcp.html#why">
          <front>
            <title>When are TCP queries sent?</title>
            <author surname="Bernstein" initials="D.">
            </author>
	    <date month="November" year="2002"/>
          </front>
        </reference>

        <reference anchor="CASTRO2010">
          <front>
            <title>Understanding and Preparing for DNS Evolution</title>
            <author fullname="Sebastian Castro" initials="S." surname="Castro"/>
            <author fullname="Min Zhang" initials="M." surname="Zhang"/>
            <author fullname="Wolfgang John" initials="W." surname="John"/>
            <author fullname="Duane Wessels" initials="D." surname="Wessels"/>
            <author fullname="Kimberly claffy" initials="K." surname="claffy"/>
            <date month="April" year="2010"/>
          </front>
<seriesInfo name="DOI" value="10.1007/978-3-642-12365-8_1"/>
        </reference>

        <reference anchor="NETALYZR">
          <front>
            <title>Netalyzr: Illuminating The Edge Network</title>
            <author fullname="Christian Kreibich" initials="C." surname="Kreibich"/>
            <author fullname="Nicholas Weaver" initials="N." surname="Weaver"/>
            <author fullname="Boris Nechaev" initials="B." surname="Nechaev"/>
            <author fullname="Vern Paxson" initials="V." surname="Paxson"/>
            <date year="2010" month="November"/>
          </front>
	  <seriesInfo name="DOI" value="10.1145/1879141.1879173"/>
        </reference>

        <reference anchor="VERISIGN">
          <front>
            <title>An Analysis of TCP Traffic in Root Server DITL Data</title>
            <author fullname="Matt Thomas" initials="M." surname="Thomas"/>
            <author fullname="Duane Wessels" initials="D." surname="Wessels"/>
            <date year="2014" month="October"/>
          </front>
	  <refcontent>DNS-OARC 2014 Fall Workshop</refcontent>
        </reference>


        <reference anchor="TDNS">
          <front>
            <title>Connection-Oriented DNS to Improve Privacy and Security</title>
            <author fullname="Liang Zhu" initials="L." surname="Zhu"/>
            <author fullname="John Heidemann" initials="J." surname="Heidemann"/>
            <author fullname="Duane Wessels" initials="D." surname="Wessels"/>
            <author fullname="Allison Mankin" initials="A." surname="Mankin"/>
            <author fullname="Nikita Somaiya" initials="N." surname="Somaiya"/>
            <date year="2015" month="May"/>
          </front>
	  <seriesInfo name="DOI" value="10.1109/SP.2015.18"/>
        </reference>

        <reference anchor="RRL">
          <front>
            <title>DNS Response Rate Limiting (DNS RRL)</title>
            <author fullname="Paul Vixie" initials="P." surname="Vixie"/>
            <author fullname="Vernon Schryver" initials="V." surname="Schryver"/>
            <date year="2012" month="April"/>
          </front>
          <refcontent>ISC-TN-2012-1-Draft1</refcontent>
        </reference>

        <reference anchor="LEWIS" target="https://ripe74.ripe.net/presentations/25-RIPE74-lewis-submission.pdf">
          <front>
            <title>2017 DNSSEC KSK Rollover</title>
            <author fullname="Edward Lewis" initials="E." surname="Lewis"/>
            <date year="2017" month="May"/>
          </front>
          <refcontent>RIPE 74</refcontent>
        </reference>

        <reference anchor="TOYAMA">
          <front>
            <title>DNS Anomalies and Their Impacts on DNS Cache Servers</title>
            <author fullname="Katsuyasu Toyama" initials="K." surname="Toyama"/>
            <author fullname="Keisuke Ishibashi" initials="K." surname="Ishibashi"/>
            <author fullname="Tsuyoshi Toyono" initials="T." surname="Toyono"/>
            <author fullname="Masahiro Ishino" initials="M." surname="Ishino"/>
            <author fullname="Chika Yoshimura" initials="C." surname="Yoshimura"/>
            <author fullname="Kazunori Fujiwara" initials="K." surname="Fujiwara"/>
            <date year="2004" month="October"/>
          </front>
          <refcontent>NANOG 32</refcontent>
        </reference>

        <reference anchor="HUSTON" target="https://blog.apnic.net/2017/08/22/dealing-ipv6-fragmentation-dns/">
          <front>
            <title>Dealing with IPv6 fragmentation in the DNS</title>
            <author fullname="Geoff Huston" initials="G." surname="Huston"/>
            <date year="2017" month="August"/>
          </front>
        </reference>


        <reference anchor="CLOUDFLARE" target="https://blog.cloudflare.com/black-lies/">
          <front>
            <title>Economical With The Truth: Making DNSSEC Answers Cheap</title>
            <author fullname="Dani Grant" initials="D." surname="Grant">
              <organization>Cloudflare</organization>
            </author>
            <date year="2016" month="June"/>
          </front>
        </reference>

        <reference anchor="DESIGNTEAM" target="https://www.iana.org/reports/2016/root-ksk-rollover-design-20160307.pdf">
          <front>
            <title>Root Zone KSK Rollover Plan</title>
            <author>
              <organization>ICANN</organization>
            </author>
            <date year="2016" month="March"/>
          </front>
        </reference>
        <reference anchor="WIKIPEDIA_TFO" target="https://en.wikipedia.org/w/index.php?title=TCP_Fast_Open&amp;oldid=1071397204">
          <front>
            <title>TCP Fast Open</title>
            <author>
              <organization>Wikipedia</organization>
            </author>
            <date year="2022" month="February"/>
          </front>
        </reference>
     <reference anchor="libpcap" target="https://www.tcpdump.org">
          <front>
            <title>Tcpdump and Libpcap</title>
            <author>
              <organization>The Tcpdump Group</organization>
            </author>
          </front>
        </reference>

        <reference anchor="dnscap" target="https://www.dns-oarc.net/tools/dnscap">
          <front>
            <title>DNSCAP</title>
            <author>
              <organization>DNS-OARC</organization>
            </author>
            <date year="2014" month="February"/>
          </front>
        </reference>

        <reference anchor="dnstap" target="https://dnstap.info">
          <front>
            <title>dnstap</title>
            <author/>
            <date/>
          </front>
        </reference>

        <reference anchor="accept_filter" target="https://www.freebsd.org/cgi/man.cgi?query=accept_filter">
          <front>
            <title>FreeBSD accept_filter(9)</title>
            <author>
              <organization>FreeBSD</organization>
            </author>
            <date month="June" year="2000"/>
          </front>
        </reference>

<!-- [AVOID_FRAGS] [I-D.ietf-dnsop-avoid-fragmentation] IESG state I-D Exists -->

<xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-dnsop-avoid-fragmentation.xml"/>

        <reference anchor="FRAG_POISON" target="https://arxiv.org/pdf/1205.4011.pdf">
          <front>
            <title>Fragmentation Considered Poisonous</title>
            <author fullname="Amir Herzberg" initials="A." surname="Herzberg"/>
            <author fullname="Haya Shulman" initials="H." surname="Shulman"/>
            <date year="2012" month="May"/>
          </front>
        </reference>
	
        <reference anchor="ROLL_YOUR_ROOT" target="https://dl.acm.org/doi/10.1145/3355369.3355570">
          <front>
            <title>Roll, Roll, Roll Your Root: A Comprehensive Analysis of the First Ever DNSSEC Root KSK Rollover</title>
            <author fullname="Moritz Müller" initials="M." surname="Müller"/>
            <author fullname="Matthew Thomas" initials="M." surname="Thomas"/>
            <author fullname="Duane Wessels" initials="D." surname="Wessels"/>
            <author fullname="Wes Hardaker" initials="W." surname="Hardaker"/>
            <author fullname="Taejoong Chung" initials="T." surname="Chung"/>
            <author fullname="Willem Toorop" initials="W." surname="Toorop"/>
            <author fullname="Roland van Rijswijk-Deij" initials="R." surname="van Rijswijk-Deij"/>
            <date year="2019" month="October"/>
          </front>
	  <seriesInfo name="DOI" value="10.1145/3355369.3355570"/>
        </reference>

        <reference anchor="BIND" target="https://www.isc.org/bind/">
          <front>
            <title>BIND 9</title>
            <author>
              <organization>Internet Systems Consortium</organization>
            </author>
            <date/>
          </front>
        </reference>

        <reference anchor="ECDSA" target="https://dl.acm.org/doi/10.1145/2831347.2831350">
          <front>
            <title>Making the Case for Elliptic Curves in DNSSEC</title>
            <author fullname="Roland van Rijswijk-Deij" initials="R." surname="van Rijswijk-Deij"/>
            <author fullname="Anna Sperotto" initials="A." surname="Sperotto"/>
            <author fullname="Aiko Pras" initials="A." surname="Pras"/>
            <date year="2015" month="October"/>
          </front>
	  <seriesInfo name="DOI" value="10.1145/2831347.2831350"/>
        </reference>

        <reference anchor="FLAGDAY2020" target="https://dnsflagday.net/2020/">
          <front>
            <title>DNS Flag Day 2020</title>
            <author><organization>DNS Software and Service Providers </organization></author>
            <date month="October" year="2020"/>
          </front>
        </reference>

        <reference anchor="KSK_ROLLOVER_ARCHIVES" target="https://mm.icann.org/pipermail/ksk-rollover/2019-January/date.html">
          <front>
            <title>KSK Rollover List Archives</title>
            <author>
              <organization>ICANN</organization>
            </author>
            <date year="2019" month="January"/>
          </front>
        </reference>

        <reference anchor="phrack" target="http://phrack.org/issues/54/10.html">
          <front>
            <title>Defeating Sniffers and Intrusion Detection Systems</title>
            <author fullname="horizon"/>
            <date year="1998" month="December"/>
          </front>
	  <refcontent>Phrack Magazine</refcontent>
        </reference>

        <reference anchor="APNIC" target="https://labs.apnic.net/?p=1380">
          <front>
            <title>DNS XL</title>
            <author fullname="Geoff Huston" initials="G." surname="Huston"/>
            <date year="2020" month="October"/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="dnsrfcs" numbered="true" toc="default">
      <name>RFCs Related to DNS Transport over TCP</name>
     <t>This section enumerates all known RFCs with a status of
     Internet Standard, Proposed Standard,
     Informational, Best Current Practice,
     or Experimental that either implicitly or explicitly make
     assumptions or statements about the use of TCP as a transport for
     the DNS germane to this document.</t>
      <section numbered="true" toc="default">
        <name>RFC 1035 - DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION</name>
        <t>The Internet Standard <xref target="RFC1035" format="default"/> is the
       base DNS specification that explicitly defines support for DNS
       over TCP.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 1536 - Common DNS Implementation Errors and Suggested Fixes</name>
        <t>The Informational document <xref target="RFC1536" format="default"/>
       states that UDP is "the chosen protocol for communication though TCP
       is used for zone transfers."  That statement should now be
       considered in its historical context and is no longer a proper
       reflection of modern expectations.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 1995 - Incremental Zone Transfer in DNS</name>
        <t>The Proposed Standard <xref target="RFC1995" format="default"/>
       documents the use of TCP as the fallback transport when Incremental Zone Transfer (IXFR)
       responses do not fit into a single UDP response.  As with Authoritative Transfer (AXFR),
       IXFR messages are typically delivered over TCP by default in
       practice.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 1996 - A Mechanism for Prompt Notification of Zone Changes (DNS NOTIFY)</name>
        <t>The Proposed Standard <xref target="RFC1996" format="default"/>
       suggests that a primary server may decide to issue NOTIFY messages over
       TCP.  In practice, NOTIFY messages are generally sent over UDP,
       but this specification leaves open the possibility that the
       choice of transport protocol is up to the primary server; therefore,
       a secondary server ought to be able to operate over both UDP and TCP.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 2181 - Clarifications to the DNS Specification</name>
        <t>The Proposed Standard <xref target="RFC2181" format="default"/>
       includes clarifying text on how a client should react to the TC
       bit set on responses.  It is advised that the response be
       discarded and the query resent using TCP.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 2694 - DNS extensions to Network Address Translators (DNS_ALG)</name>
        <t>The Informational document <xref target="RFC2694" format="default"/>
       enumerates considerations for NAT
       devices to properly handle DNS traffic.  This document is
       noteworthy in its suggestion that
       "[t]ypically, TCP is used for AXFR requests,"
       as further evidence that helps
       explain why DNS over TCP may have often been treated very
       differently than DNS over UDP in operational networks.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 3225 - Indicating Resolver Support of DNSSEC</name>
        <t>The Proposed Standard <xref target="RFC3225" format="default"/>
       makes statements indicating that DNS over TCP is "detrimental" as a
       result of increased traffic, latency, and server load.  This
       document is a companion to the next document in the RFC
       Series that describes the requirement for EDNS(0) support for DNSSEC.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 3226 - DNSSEC and IPv6 A6 aware server/resolver message size requirements</name>
        <t>Although updated by later DNSSEC RFCs,
       the Proposed Standard <xref target="RFC3226" format="default"/>
       strongly argues in favor of
       UDP messages instead of TCP, largely for performance reasons.
       The document declares EDNS(0) a requirement for DNSSEC servers and
       advocates that packet fragmentation may be preferable to TCP in
       certain situations.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 4472 - Operational Considerations and Issues with IPv6 DNS</name>
        <t>The Informational document <xref target="RFC4472" format="default"/> notes
       that IPv6 data may increase DNS responses beyond what would fit in
       a UDP message.  What is particularly noteworthy, but perhaps less common today
       than when this document was written, is that it refers to implementations that
       truncate data without setting the TC bit to encourage the client to
       resend the query using TCP.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 5452 - Measures for Making DNS More Resilient against Forged Answers</name>
        <t>The Proposed Standard <xref target="RFC5452" format="default"/> arose
       as public DNS systems began to experience widespread abuse from spoofed
       queries, resulting in amplification and reflection attacks against
       unwitting victims.  One of the leading justifications for supporting
       DNS over TCP to thwart these attacks is briefly described in <xref target="RFC5452" sectionFormat="of" section="9.3"/> ("Spoof Detection and Countermeasure").</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 5507 - Design Choices When Expanding the DNS</name>
        <t>The Informational document <xref target="RFC5507" format="default"/> was
       largely an attempt to dissuade new DNS data types from overloading the
       TXT resource record type.  In so doing, it summarizes the conventional
       wisdom of DNS design and implementation practices.  The authors
       suggest TCP overhead and stateful properties pose challenges compared
       to UDP and imply that UDP is generally preferred for performance and
       robustness.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 5625 - DNS Proxy Implementation Guidelines</name>
        <t>The Best Current Practice document <xref target="RFC5625" format="default"/>
       provides DNS proxy implementation guidance including the mandate that a
       proxy "<bcp14>MUST</bcp14> [...] be prepared to receive and forward queries over TCP"
       even though it suggests that, historically, TCP transport has not been strictly
       mandatory in stub resolvers or recursive servers.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 5936 - DNS Zone Transfer Protocol (AXFR)</name>
        <t>The Proposed Standard <xref target="RFC5936" format="default"/>
       provides a detailed specification for the zone transfer protocol,
       as originally outlined in the early DNS standards.  AXFR operation
       is limited to TCP and not specified for UDP.  This document
       discusses TCP usage at length.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 7534 - AS112 Nameserver Operations</name>
        <t>The Informational document <xref target="RFC7534" format="default"/>
       enumerates the requirements for operation of AS112 project DNS
       servers.  New AS112 nodes are tested for their ability to provide
       service on both UDP and TCP transports, with the implication that
       TCP service is an expected part of normal operations.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 6762 - Multicast DNS</name>
        <t>In the Proposed Standard <xref target="RFC6762" format="default"/>, the
       TC bit is deemed to have essentially the same meaning as described
       in the original DNS specifications.  That is, if a response with the
       TC bit set is received, "[...] the querier <bcp14>SHOULD</bcp14> reissue its query
       using TCP in order to receive the larger response."</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 6891 - Extension Mechanisms for DNS (EDNS(0))</name>
        <t>The Internet Standard <xref target="RFC6891" format="default"/>
       helped slow the use of and need for DNS-over-TCP messages.  This
       document highlights concerns over server load and scalability in
       widespread use of DNS over TCP.</t>
      </section>
      <section numbered="true" toc="default">
        <name>IAB RFC 6950 - Architectural Considerations on Application Features in the DNS</name>
        <t>The Informational document <xref target="RFC6950" format="default"/> draws
       attention to large data in the DNS.  TCP is referenced in the
       context as a common fallback mechanism and counter to some spoofing
       attacks.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 7477 - Child-to-Parent Synchronization in DNS</name>
        <t>The Proposed Standard <xref target="RFC7477" format="default"/>
	specifies an RRType and a protocol to signal and synchronize NS, A,
       and AAAA resource record changes from a child-to-parent zone.
       Since this protocol may require multiple requests and responses,
       it recommends utilizing DNS over TCP to ensure the conversation
       takes place between a consistent pair of end nodes.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 7720 - DNS Root Name Service Protocol and Deployment Requirements</name>
        <t>The Best Current Practice document <xref target="RFC7720" format="default"/>
       declares that root name service "<bcp14>MUST</bcp14> support UDP <xref target="RFC0768" format="default"/> and TCP <xref target="RFC0793" format="default"/>
       transport of DNS queries and responses."</t>
      </section>
      <section anchor="app-rfc7766" numbered="true" toc="default">
        <name>RFC 7766 - DNS Transport over TCP - Implementation Requirements</name>
        <t>The Proposed Standard <xref target="RFC7766" format="default"/>
       instructs DNS implementors to provide support for carrying DNS-over-TCP messages in their software and 
       might be considered the direct ancestor of this operational
       requirements document.
       The implementation requirements document
       codifies mandatory support for DNS-over-TCP in compliant DNS
       software but
       makes no recommendations to operators, which we seek to address
       here.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 7828 - The edns-tcp-keepalive EDNS(0) Option</name>
        <t>The Proposed Standard <xref target="RFC7828" format="default"/>
       defines an EDNS(0) option to negotiate an idle timeout value for
       long-lived DNS-over-TCP connections.  Consequently, this document
       is only applicable and relevant to DNS-over-TCP sessions and
       between implementations that support this option.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 7858 - Specification for DNS over Transport Layer Security (TLS)</name>
        <t>The Proposed Standard <xref target="RFC7858" format="default"/>
       defines a method for putting DNS messages into a TCP-based
       encrypted channel using TLS.  This specification is noteworthy
       for explicitly targeting the stub-to-recursive traffic but
       does not preclude its application from recursive-to-authoritative
       traffic.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 7873 - Domain Name System (DNS) Cookies</name>
        <t>The Proposed Standard <xref target="RFC7873" format="default"/>
       describes an EDNS(0) option to provide additional protection
       against query and answer forgery.  This specification mentions
       DNS over TCP as an alternative mechanism when DNS cookies
       are not available.  The specification does make mention of DNS-over-TCP processing in two specific situations.  In one, when a
       server receives only a client cookie in a request, the server
       should consider whether the request arrived over TCP, and if so,
       it should consider accepting TCP as sufficient to authenticate
       the request and respond accordingly.  In another, when a client
       receives a BADCOOKIE reply using a fresh server cookie, the
       client should retry using TCP as the transport.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 7901 - CHAIN Query Requests in DNS</name>
        <t>The Experimental specification <xref target="RFC7901" format="default"/>
       describes an EDNS(0) option that can be used by a security-aware
       validating resolver to request and obtain a complete DNSSEC
       validation path for any single query.  This document requires the
       use of DNS over TCP or a transport
       mechanism verified by a source IP address such as EDNS-COOKIE <xref target="RFC7873" format="default"/>.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 8027 - DNSSEC Roadblock Avoidance</name>
        <t>The Best Current Practice document <xref target="RFC8027" format="default"/> details observed
       problems with DNSSEC deployment and mitigation techniques.
       Network traffic blocking and restrictions, including DNS-over-TCP
       messages, are highlighted as one reason for DNSSEC deployment
       issues.  While this document suggests these sorts of problems are
       due to "non-compliant infrastructure", the
       scope of the document is limited to detection and mitigation
       techniques to avoid so-called DNSSEC roadblocks.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 8094 - DNS over Datagram Transport Layer Security (DTLS)</name>
        <t>The Experimental specification <xref target="RFC8094" format="default"/>
       details a protocol that uses a datagram transport (UDP) but
       stipulates that "DNS clients and servers that implement DNS over
       DTLS <bcp14>MUST</bcp14> also implement DNS over TLS in order to provide privacy
       for clients that desire Strict Privacy [...]."  This requirement
       implies DNS over TCP must be supported in case the message size
       is larger than the path MTU.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 8162 - Using Secure DNS to Associate Certificates with Domain Names for S/MIME</name>
        <t>The Experimental specification <xref target="RFC8162" format="default"/>
       describes a technique to authenticate user X.509 certificates
       in an S/MIME system via the DNS.  The document points out that
       the new experimental resource record types are expected to carry
       large payloads, resulting in the suggestion that "applications
       <bcp14>SHOULD</bcp14> use TCP -- not UDP -- to perform queries for the SMIMEA
       resource record."</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 8324 - DNS Privacy, Authorization, Special Uses, Encoding, Characters, Matching, and Root Structure: Time for Another Look?</name>
        <t> The Informational document <xref target="RFC8324" format="default"/>
       briefly discusses the common role and challenges of DNS over TCP
       throughout the history of DNS.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 8467 - Padding Policies for Extension Mechanisms for DNS (EDNS(0))</name>
        <t>The Experimental document <xref target="RFC8467" format="default"/>
       reminds implementors to consider the underlying transport
       protocol (e.g., TCP) when calculating the padding length when
       artificially increasing the DNS message size with an EDNS(0)
       padding option.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 8482 - Providing Minimal-Sized Responses to DNS Queries That Have QTYPE=ANY</name>
        <t>The Proposed Standard <xref target="RFC8482" format="default"/>
       describes alternative ways that DNS servers can respond to queries
       of type ANY, which are sometimes used to provide amplification
       in DDoS attacks.  The specification notes that responders may
       behave differently, depending on the transport.  For example,
       minimal-sized responses may be used over UDP transport, while
       full responses may be given over TCP.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 8483 - Yeti DNS Testbed</name>
        <t>The Informational document <xref target="RFC8483" format="default"/>
       describes a testbed environment that highlights some DNS-over-TCP
       behaviors, including issues involving packet fragmentation and
       operational requirements for TCP stream assembly in order to
       conduct DNS measurement and analysis.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 8484 - DNS Queries over HTTPS (DoH)</name>
        <t>The Proposed Standard <xref target="RFC8484" format="default"/>
       defines a protocol for sending DNS queries and responses over
       HTTPS.  This specification assumes TLS and TCP for the underlying
       security and transport layers, respectively.  Self-described as a
       technique that more closely resembles a tunneling mechanism,
       DoH nevertheless likely implies DNS over TCP in some sense, if not
       directly.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 8490 - DNS Stateful Operations</name>
        <t>The Proposed Standard <xref target="RFC8490" format="default"/>
       updates the base protocol specification with a new OPCODE to
       help manage stateful operations in persistent sessions, such
       as those that might be used by DNS over TCP.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 8501 - Reverse DNS in IPv6 for Internet Service Providers</name>
        <t>The Informational document <xref target="RFC8501" format="default"/>
       identifies potential operational challenges with dynamic DNS,
       including denial-of-service threats.  The document suggests TCP
       may provide some advantages but that updating hosts would need
       to be explicitly configured to use TCP instead of UDP.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 8806 - Running a Root Server Local to a Resolver</name>
        <t>The Informational document <xref target="RFC8806" format="default"/>
       describes how to obtain and operate a local copy of the root zone
       with examples showing how to pull from authoritative sources using
       a DNS-over-TCP zone transfer.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 8906 - A Common Operational Problem in DNS Servers: Failure to Communicate</name>
        <t>The Best Current Practice document <xref target="RFC8906" format="default"/>
       discusses a number of DNS operational failure scenarios and how to
       avoid them.  This includes discussions involving DNS-over-TCP queries,
       EDNS over TCP, and a testing methodology that includes a section on
       verifying DNS-over-TCP functionality.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 8932 - Recommendations for DNS Privacy Service Operators</name>
        <t>The Best Current Practice document <xref target="RFC8932" format="default"/>
       presents privacy considerations to DNS privacy service operators.
       These mechanisms sometimes include the use of TCP and are therefore
       susceptible to information leakage such as TCP-based fingerprinting.
       This document also references an earlier draft version of this document.</t>
      </section>
      <section numbered="true" toc="default">
        <name>RFC 8945 - Secret Key Transaction Authentication for DNS (TSIG)</name>
        <t>The Internet Standard <xref target="RFC8945" format="default"/>
       recommends that a client use TCP if truncated TSIG messages are
       received.</t>
      </section>
    </section>
    <section anchor="Acknowledgments" numbered="false" toc="default">
      <name>Acknowledgments</name>
      <t>This document was initially motivated by feedback from students
     who pointed out that they were hearing contradictory information
     about filtering DNS-over-TCP messages. Thanks in particular to a
     teaching colleague, JPL, who perhaps unknowingly encouraged the
     initial research into the differences between what the community has
     historically said and did.  Thanks to all the NANOG 63 attendees
     who provided feedback for an early talk on this subject.</t>
      <!-- https://archive.nanog.org/sites/default/files/nanog63-dnstrack-kristoff-dnstcp.pdf -->

     <t>The following individuals provided an array of feedback to help
     improve this document: <contact fullname="Joe Abley"/>, <contact fullname="Piet Barber"/>, <contact fullname="Sara Dickinson"/>, <contact fullname="Tony Finch"/>, <contact fullname="Bob Harold"/>, <contact fullname="Paul Hoffman"/>, <contact fullname="Geoff Huston"/>, <contact fullname="Tatuya Jinmei"/>,
     <contact fullname="Puneet Sood"/>, and <contact fullname="Richard Wilhelm"/>.  The authors are also indebted to the contributions
     stemming from discussion in the TCPM Working Group meeting at
     IETF 104.  Any remaining errors or imperfections are the sole
     responsibility of the document authors.</t>
    </section>
  </back>
</rfc>
